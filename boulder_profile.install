<?php

/**
 * @file
 * Install, update and uninstall functions for the profilename install profile.
 */

use Drupal\shortcut\Entity\Shortcut;
use Drupal\user\Entity\User;
use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function boulder_profile_install() {
  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();

  // Afterward, run the custom install tasks.
  _boulder_profile_install_users();
  _boulder_profile_install_shortcuts();
  _boulder_profile_install_administerusersbyrole_settings();
  _boulder_profile_install_webform_settings();
}

/**
 * Adds default shortcuts (CuBoulder/tiamat10-profile#67).
 */
function boulder_profile_update_9501() {
  _boulder_profile_install_shortcuts();
}

/**
 * Updates Webform defaults (CuBoulder/tiamat10-profile#81).
 */
function boulder_profile_update_9502() {
  _boulder_profile_install_webform_settings();
}

/**
 * Installs default (privileged) users.
 */
function _boulder_profile_install_users() {
  /*
   * Create inital users for the Web Team
   */
  $users = ['jesp3304', 'mibo7729', 'joni1621', 'pabr5825'];
  foreach ($users as $i) {
    User::create([
      'name' => $i,
      'mail' => "{$i}@colorado.edu",
      'pass' => 'nextest20252025nextest',
      'status' => 1,
      'roles' => 'developer',
    ])->enforceIsNew()->save();
  }

  /*
   * Create inital users for the UX Team
   */
  $users = ['crafts', 'fraziere'];
  foreach ($users as $i) {
    User::create([
      'name' => $i,
      'mail' => "{$i}@colorado.edu",
      'pass' => 'nextest20252025nextest',
      'status' => 1,
      'roles' => 'architect',
    ])->enforceIsNew()->save();
  }

  /*
   * Create inital users for the Site Manager Role
   */
  $users = ['webexpress-manager'];
  foreach ($users as $i) {
    User::create([
      'name' => $i,
      'mail' => "{$i}@colorado.edu",
      'pass' => 'nextest',
      'status' => 1,
      'roles' => 'site_manager',
    ])->enforceIsNew()->save();
  }

  /*
   * Create inital users for the Content Editor Role
   */
  $users = ['webexpress-editor'];
  foreach ($users as $i) {
    User::create([
      'name' => $i,
      'mail' => "{$i}@colorado.edu",
      'pass' => 'nextest',
      'status' => 1,
      'roles' => 'content_editor',
    ])->enforceIsNew()->save();
  }
}

/**
 * Installs default shortcuts.
 */
function _boulder_profile_install_shortcuts() {
  Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Blocks'),
    'weight' => -18,
    'link' => ['uri' => 'internal:/admin/content/block'],
  ])->save();

  Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Main menu'),
    'weight' => -17,
    'link' => ['uri' => 'internal:/admin/structure/menu/manage/main'],
  ])->save();
}

/**
 * Installs "Administer users by role" contrib module settings.
 *
 * This workaround is necessary as the settings get overriden by the contrib
 * module following the installation of the roles.
 */
function _boulder_profile_install_administerusersbyrole_settings() {
  $profilePath = Drupal::getContainer()->get('extension.path.resolver')->getPath('profile', 'boulder_profile');
  $settingsYaml = Yaml::parse(file_get_contents($profilePath . '/config/install/administerusersbyrole.settings.yml'));
  \Drupal::configFactory()->getEditable('administerusersbyrole.settings')->set('roles', $settingsYaml['roles'])->save();
}

/**
 * Installs "Webform" contrib module settings.
 */
function _boulder_profile_install_webform_settings() {
  $settings = \Drupal::configFactory()->getEditable('webform.settings');
  $htmlEditorSettings = $settings->get('html_editor');
  $htmlEditorSettings['element_format'] = $htmlEditorSettings['mail_format'] = 'wysiwyg';
  $settings->set('html_editor', $htmlEditorSettings)->save();
}

/**
 * Grants permissions to Site Manager and updates administerusersbyrole.settings so site managers can run operations on fellow site managers
 *
 * This is a workaround as having these permissions explicitly itemized in the user.role.site_manager config causes an install error
 */
function boulder_profile_update_9503() {
  // Ensure that the "administerusersbyrole" module is fully installed before proceeding.
  if (!\Drupal::moduleHandler()->moduleExists('administerusersbyrole')) {
    \Drupal::logger('boulder_profile')->error('administerusersbyrole module is not installed. Skipping role and config update.');
    return;
  }

  // Load and update administerusersbyrole.settings.yml.
  $config = \Drupal::configFactory()->getEditable('administerusersbyrole.settings');

  // Merge the required updates.
  $config->merge([
    'roles' => [
      'site_manager' => 'perm',
    ],
  ])->save();

  \Drupal::logger('boulder_profile')->notice('Updated administerusersbyrole.settings.yml to set site_manager to "perm".');

  // Permissions for site_manager
  $site_manager_permissions = [
    'view users by role',
    'cancel users by role',
    'edit users by role',
    'role-assign users by role',
    'cancel users with role site_manager',
    'edit users with role site_manager',
    'view users with role site_manager',
    'role-assign users with role site_manager',
  ];

  // function to update a role's permissions
  $update_role_permissions = function ($role_name, $permissions) {
    $role = \Drupal\user\Entity\Role::load($role_name);
    if ($role) {
      foreach ($permissions as $permission) {
        if (!$role->hasPermission($permission)) {
          $role->grantPermission($permission);
        }
      }
      $role->save();
      \Drupal::logger('boulder_profile')->notice("Updated permissions for $role_name role.");
    } else {
      \Drupal::logger('boulder_profile')->error("$role_name role does not exist.");
    }
  };

  // Update permissions for site_manager
  $update_role_permissions('site_manager', $site_manager_permissions);
}
